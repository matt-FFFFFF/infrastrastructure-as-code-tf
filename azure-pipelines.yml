# Azure DevOps Pipeline to perform a terraform init & terraform plan
# Matt White @ Microsoft https://github.com/matt-FFFFFF

trigger:
  batch: true
  branches:
    include:
    - master
    - development
    - azure-pipelines
  paths:
    include:
    - /tf-files/*
    exclude:
    - /azure-pipelines.yml
    - Readme.md
    - .gitignore
pr:
  autoCancel: true
  branches:
    include:
    - master

variables:
  terraform-version: '0.11.11'
  terraform-sha256: '94504f4a67bad612b5c8e3a4b7ce6ca2772b3c1559630dfd71e9c519e3d6149c'
  keyvault: tfsecrets-mawhi
  azureservice: azurerm-prod
  TF_IN_AUTOMATION: 1

pool:
  vmImage: 'Ubuntu-16.04'

steps:
- script: |
    curl https://releases.hashicorp.com/terraform/$(terraform-version)/terraform_$(terraform-version)_linux_amd64.zip --output terraform.zip
  displayName: Download Terraform

- script: 
    echo "$(terraform-sha256) terraform.zip" > sha256sums.txt
    sha256sum --check --status sha256sums.txt
  displayName: Verify Terraform executable SHA256 checksum

- script: |
    unzip ./terraform.zip
    chmod a+x ./terraform
    if [ "Terraform v$(terraform-version)" =! "`./terraform -v`" ]; then exit 1; fi
  displayName: Extract Terraform binary

- task: AzureKeyVault@1
  displayName: Get secrets from KeyVault
  inputs:
    ConnectedServiceName: $(azureservice)
    keyVaultName: $(keyvault)
    SecretsFilter: '*'

- script: mkdir $(Agent.WorkFolder)/tfroot
  displayName: "Create 'tfroot' directory"

- task: CopyFiles@2
  inputs:
    SourceFolder: $(Build.SourcesDirectory)
    TargetFolder: $(Agent.WorkFolder)/tfroot
    Contents: |
     **/*
     !.git/**/*
  displayName: Copy files to staging directory (excluding .git)

- script: |
    ./terraform init -no-color -input=false -backend-config="container_name=$(terraform-backend-container-name)" \
    -backend-config="access_key=$(terraform-backend-access-key)" \
    -backend-config="key=$(terraform-backend-key)" \
    -backend-config="storage_account_name=$(terraform-backend-storage-account-name)" \
    -backend-config="environment=$(terraform-backend-environment)"
  displayName: Terraform init
  workingDirectory: $(Agent.WorkFolder)/tfroot/tf-files

- script: ./terraform plan -no-color -input=false -out='tfplan'
  displayName: Terraform plan
  workingDirectory: $(Agent.WorkFolder)/tfroot/tf-files
  env:
    TF_VAR_AZURERM_CLIENT_ID: $(azurerm-client-id)
    TF_VAR_AZURERM_CLIENT_SECRET: $(azurerm-client-secret)
    TF_VAR_AZURERM_SUBSCRIPTION_ID: $(azurerm-subscription-id)
    TF_VAR_AZURERM_TENANT_ID: $(azurerm-tenant-id)

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Agent.WorkFolder)/tfroot
    ArtifactName: tfplan
  displayName: Copy build artifacts
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))